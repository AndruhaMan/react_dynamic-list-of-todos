{"version":3,"sources":["types/sortingStatus.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SortingStatus","TodoList","todos","onSelect","selectedTodoId","className","map","todo","id","title","completed","type","onClick","handleShowButton","TodoFilter","query","onQuery","onStatus","onChange","event","target","value","All","Active","Completed","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","userId","useState","user","setUser","isLoading","setIsLoading","useEffect","getUser","href","email","name","App","setTodos","setSelectedTodoId","sortingStatus","setSortingStatus","setQuery","filteredTodos","useMemo","serachingQuery","trim","toLowerCase","filter","includes","filterTodos","selectedTodo","find","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c549f69e.chunk.js","sourcesContent":["export enum SortingStatus {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  onSelect: (todoId: number | null) => void,\n  selectedTodoId: number | null,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelect,\n  selectedTodoId,\n}) => {\n  const handleShowButton = (todo: Todo) => {\n    onSelect(todo.id);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n\n          return (\n            <tr data-cy=\"todo\" key={id}>\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handleShowButton(todo)}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={id !== selectedTodoId\n                        ? (\n                          'far fa-eye'\n                        )\n                        : (\n                          'far fa-eye-slash'\n                        )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { SortingStatus } from '../../types/sortingStatus';\n\ntype Props = {\n  query: string,\n  onQuery: (query: string) => void,\n  onStatus: (sortingStatus: SortingStatus) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onQuery,\n  onStatus,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => {\n              onStatus(event.target.value as SortingStatus);\n            }}\n          >\n            <option value={SortingStatus.All}>All</option>\n            <option value={SortingStatus.Active}>Active</option>\n            <option value={SortingStatus.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onQuery('')}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  todo: Todo,\n  onSelect: (todoId: null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  onSelect,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getUser(userId)\n      .then(setUser)\n      .then(() => setIsLoading(false));\n  }, [todo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? (\n          <Loader />\n        )\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => onSelect(null)}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {completed\n                  ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  )\n                  : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n\n                {' by '}\n\n                {user && (\n                  <a href={`mailto:${user.email}`}>\n                    {user.name}\n                  </a>\n                )}\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { SortingStatus } from './types/sortingStatus';\n\nfunction filterTodos(todos: Todo[], sortingStatus: string, query: string) {\n  const serachingQuery = query.trim().toLowerCase();\n  const todoWithQuery = todos.filter(todo => (\n    todo.title.toLowerCase().includes(serachingQuery)\n  ));\n\n  return todoWithQuery.filter(todo => {\n    switch (sortingStatus) {\n      case SortingStatus.Active:\n        return !todo.completed;\n\n      case SortingStatus.Completed:\n        return todo.completed;\n\n      default:\n        return true;\n    }\n  });\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedTodoId, setSelectedTodoId] = useState<number | null>(null);\n  const [sortingStatus, setSortingStatus] = useState(SortingStatus.All);\n  const [query, setQuery] = useState('');\n\n  const filteredTodos = useMemo(() => {\n    return filterTodos(todos, sortingStatus, query);\n  }, [todos, sortingStatus, query]);\n\n  const selectedTodo = filteredTodos.find(todo => todo.id === selectedTodoId) || null;\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(setTodos)\n      .then(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onQuery={setQuery}\n                onStatus={setSortingStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <Loader />\n                )\n                : (\n                  <TodoList\n                    todos={filteredTodos}\n                    onSelect={setSelectedTodoId}\n                    selectedTodoId={selectedTodoId}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onSelect={(todoId: null) => setSelectedTodoId(todoId)}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}